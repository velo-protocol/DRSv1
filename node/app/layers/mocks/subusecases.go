// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/layers/subusecases/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "github.com/velo-protocol/DRSv1/node/app/entities"
	reflect "reflect"
)

// MockSubUseCase is a mock of SubUseCase interface
type MockSubUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSubUseCaseMockRecorder
}

// MockSubUseCaseMockRecorder is the mock recorder for MockSubUseCase
type MockSubUseCaseMockRecorder struct {
	mock *MockSubUseCase
}

// NewMockSubUseCase creates a new mock instance
func NewMockSubUseCase(ctrl *gomock.Controller) *MockSubUseCase {
	mock := &MockSubUseCase{ctrl: ctrl}
	mock.recorder = &MockSubUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubUseCase) EXPECT() *MockSubUseCaseMockRecorder {
	return m.recorder
}

// GetIssuerAccount mocks base method
func (m *MockSubUseCase) GetIssuerAccount(ctx context.Context, input *entities.GetIssuerAccountInput) (*entities.GetIssuerAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuerAccount", ctx, input)
	ret0, _ := ret[0].(*entities.GetIssuerAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuerAccount indicates an expected call of GetIssuerAccount
func (mr *MockSubUseCaseMockRecorder) GetIssuerAccount(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuerAccount", reflect.TypeOf((*MockSubUseCase)(nil).GetIssuerAccount), ctx, input)
}

// GetTrustedPartnerFromIssuerAccount mocks base method
func (m *MockSubUseCase) GetTrustedPartnerFromIssuerAccount(ctx context.Context, input *entities.GetTrustedPartnerFromIssuerAccountInput) (*entities.GetTrustedPartnerFromIssuerAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrustedPartnerFromIssuerAccount", ctx, input)
	ret0, _ := ret[0].(*entities.GetTrustedPartnerFromIssuerAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrustedPartnerFromIssuerAccount indicates an expected call of GetTrustedPartnerFromIssuerAccount
func (mr *MockSubUseCaseMockRecorder) GetTrustedPartnerFromIssuerAccount(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrustedPartnerFromIssuerAccount", reflect.TypeOf((*MockSubUseCase)(nil).GetTrustedPartnerFromIssuerAccount), ctx, input)
}
